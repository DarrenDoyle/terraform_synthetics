{
  "version": 4,
  "terraform_version": "0.13.1",
  "serial": 201,
  "lineage": "5da4e08b-c5a8-30b6-9514-30cdf6188a83",
  "outputs": {
    "alert_policy_id": {
      "value": "1036080",
      "type": "string"
    },
    "synthetics_dashboard_id": {
      "value": "1391944",
      "type": "string"
    },
    "synthetics_id": {
      "value": "b699967e-d578-490a-8354-b3297ab8fb14",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "foo_script",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "8ee000ff0d6b71fd1d8324da7e0c7c28f27a45854c4bbff509bb5bb310f9b357",
            "rendered": "/**\n * Feel free to explore, or check out the full documentation\n * https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/scripting-monitors/writing-api-tests\n * for details.\n */\n\nvar assert = require('assert');\n\n$http.post('http://httpbin.org/post',\n  // Post data\n  {\n    json: {\n      widgetType: 'gear',\n      widgetCount: 10\n    }\n  },\n  // Callback\n  function (err, response, body) {\n    assert.equal(response.statusCode, 200, 'Expected a 200 OK response');\n\n    console.log('Response:', body.json);\n    console.log('hello');\n    assert.equal(body.json.widgetType, 'gear', 'Expected a gear widget type');\n    assert.equal(body.json.widgetCount, 10, 'Expected 10 widgets');\n  }\n);\n",
            "template": "/**\n * Feel free to explore, or check out the full documentation\n * https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/scripting-monitors/writing-api-tests\n * for details.\n */\n\nvar assert = require('assert');\n\n$http.post('http://httpbin.org/post',\n  // Post data\n  {\n    json: {\n      widgetType: 'gear',\n      widgetCount: 10\n    }\n  },\n  // Callback\n  function (err, response, body) {\n    assert.equal(response.statusCode, 200, 'Expected a 200 OK response');\n\n    console.log('Response:', body.json);\n    console.log('hello');\n    assert.equal(body.json.widgetType, 'gear', 'Expected a gear widget type');\n    assert.equal(body.json.widgetCount, 10, 'Expected 10 widgets');\n  }\n);\n",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_alert_channel",
      "name": "tf_alert_email",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "config": [
              {
                "api_key": "",
                "auth_password": "",
                "auth_type": "",
                "auth_username": "",
                "base_url": "",
                "channel": "",
                "headers": {},
                "headers_string": "",
                "include_json_attachment": "1",
                "key": "",
                "payload": {},
                "payload_string": "",
                "payload_type": "",
                "recipients": "darsedoyle@gmail.com",
                "region": "",
                "route_key": "",
                "service_key": "",
                "tags": "",
                "teams": "",
                "url": "",
                "user_id": ""
              }
            ],
            "id": "4000911",
            "name": "darsedoyle@gmail.com",
            "type": "email"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_alert_policy",
      "name": "alert_policy_name",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": 485640,
            "channel_ids": null,
            "id": "1036080",
            "incident_preference": "PER_POLICY",
            "name": "Musement Test"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_alert_policy_channel",
      "name": "tf_alert_email",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "channel_ids": [
              4000911
            ],
            "id": "1036080:4000911",
            "policy_id": 1036080
          },
          "private": "bnVsbA==",
          "dependencies": [
            "newrelic_alert_channel.tf_alert_email",
            "newrelic_alert_policy.alert_policy_name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_dashboard",
      "name": "tf_dashboard_as_code",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dashboard_url": "https://insights.newrelic.com/accounts/485640/dashboards/1391944",
            "editable": "editable_by_owner",
            "filter": [],
            "grid_column_count": 3,
            "icon": "bar-chart",
            "id": "1391944",
            "title": "Observability: Synthetics",
            "visibility": "all",
            "widget": [
              {
                "column": 1,
                "compare_with": [],
                "drilldown_dashboard_id": 0,
                "duration": 0,
                "end_time": 0,
                "entity_ids": [],
                "facet": "",
                "height": 1,
                "limit": 0,
                "metric": [],
                "notes": "",
                "nrql": "SELECT count(*) FROM SyntheticCheck   WHERE result ='FAILED' and monitorName = 'scripted_api_workingv2'",
                "order_by": "",
                "raw_metric_name": "",
                "row": 1,
                "source": "",
                "threshold_red": 2,
                "threshold_yellow": 1,
                "title": "Number of Unresponsive Checks",
                "visualization": "billboard",
                "widget_id": 21382041,
                "width": 1
              },
              {
                "column": 1,
                "compare_with": [],
                "drilldown_dashboard_id": 0,
                "duration": 0,
                "end_time": 0,
                "entity_ids": [],
                "facet": "",
                "height": 1,
                "limit": 0,
                "metric": [],
                "notes": "",
                "nrql": "SELECT count(*) FROM SyntheticCheck  SINCE   1 week ago WHERE result = 'FAILED'  and monitorName = 'scripted_api_workingv2' FACET error LIMIT 5",
                "order_by": "",
                "raw_metric_name": "",
                "row": 2,
                "source": "",
                "threshold_red": 0,
                "threshold_yellow": 0,
                "title": "Monitors by  Error Code",
                "visualization": "facet_pie_chart",
                "widget_id": 21382040,
                "width": 1
              },
              {
                "column": 2,
                "compare_with": [],
                "drilldown_dashboard_id": 0,
                "duration": 0,
                "end_time": 0,
                "entity_ids": [],
                "facet": "",
                "height": 1,
                "limit": 0,
                "metric": [],
                "notes": "",
                "nrql": "SELECT COUNT(*) FROM  SyntheticCheck Where monitorName = 'scripted_api_workingv2'  since   1 week ago ",
                "order_by": "",
                "raw_metric_name": "",
                "row": 1,
                "source": "",
                "threshold_red": 0,
                "threshold_yellow": 0,
                "title": "Total Number of Synthetic Checks for scripted_api_workingv2 ",
                "visualization": "billboard_comparison",
                "widget_id": 21382038,
                "width": 1
              },
              {
                "column": 2,
                "compare_with": [],
                "drilldown_dashboard_id": 0,
                "duration": 0,
                "end_time": 0,
                "entity_ids": [],
                "facet": "",
                "height": 1,
                "limit": 0,
                "metric": [],
                "notes": "",
                "nrql": "SELECT percentage(count(*), WHERE result ='FAILED') FROM SyntheticCheck  where monitorName = 'scripted_api_workingv2'",
                "order_by": "",
                "raw_metric_name": "",
                "row": 1,
                "source": "",
                "threshold_red": 2,
                "threshold_yellow": 1,
                "title": "Percentage of Unresponsive Checks",
                "visualization": "billboard",
                "widget_id": 21382037,
                "width": 1
              },
              {
                "column": 3,
                "compare_with": [],
                "drilldown_dashboard_id": 0,
                "duration": 0,
                "end_time": 0,
                "entity_ids": [],
                "facet": "",
                "height": 1,
                "limit": 0,
                "metric": [],
                "notes": "",
                "nrql": "SELECT COUNT(*) FROM  SyntheticCheck Where monitorName = 'scripted_api_workingv2' and  result =  'SUCCESS' since   1 week ago ",
                "order_by": "",
                "raw_metric_name": "",
                "row": 2,
                "source": "",
                "threshold_red": 0,
                "threshold_yellow": 0,
                "title": "Golden Signals Saturation - Database",
                "visualization": "billboard_comparison",
                "widget_id": 21382039,
                "width": 1
              }
            ]
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_nrql_alert_condition",
      "name": "failure",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": 485640,
            "baseline_direction": null,
            "critical": [
              {
                "duration": 0,
                "operator": "above",
                "threshold": 10,
                "threshold_duration": 120,
                "threshold_occurrences": "at_least_once",
                "time_function": ""
              }
            ],
            "description": "",
            "enabled": true,
            "expected_groups": null,
            "id": "1036080:15933869",
            "ignore_overlap": null,
            "name": "Synthetics NRQL",
            "nrql": [
              {
                "evaluation_offset": 3,
                "query": "SELECT COUNT(*) FROM  SyntheticCheck Where monitorName = 'scripted_api_workingv2'  and  result =  'SUCCESS' ",
                "since_value": ""
              }
            ],
            "open_violation_on_group_overlap": null,
            "policy_id": 1036080,
            "runbook_url": "https://docs.example.com/my-runbook",
            "term": [],
            "type": "static",
            "value_function": "SINGLE_VALUE",
            "violation_time_limit": "ONE_HOUR",
            "violation_time_limit_seconds": null,
            "warning": []
          },
          "private": "bnVsbA==",
          "dependencies": [
            "newrelic_alert_policy.alert_policy_name"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_synthetics_alert_condition",
      "name": "bar",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "enabled": true,
            "id": "1036080:15933870",
            "monitor_id": "b699967e-d578-490a-8354-b3297ab8fb14",
            "name": "Login Scripts",
            "policy_id": 1036080,
            "runbook_url": "https://www.example.com"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "newrelic_alert_policy.alert_policy_name",
            "newrelic_synthetics_monitor.foo"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_synthetics_monitor",
      "name": "foo",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bypass_head_request": false,
            "frequency": 5,
            "id": "b699967e-d578-490a-8354-b3297ab8fb14",
            "locations": [
              "AWS_US_EAST_1"
            ],
            "name": "scripted_api_workingv2",
            "sla_threshold": 7,
            "status": "ENABLED",
            "treat_redirect_as_failure": false,
            "type": "SCRIPT_API",
            "uri": "",
            "validation_string": "",
            "verify_ssl": false
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_synthetics_monitor_script",
      "name": "foo_script",
      "provider": "provider[\"registry.terraform.io/terraform-providers/newrelic\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "b699967e-d578-490a-8354-b3297ab8fb14",
            "monitor_id": "b699967e-d578-490a-8354-b3297ab8fb14",
            "text": "/**\n * Feel free to explore, or check out the full documentation\n * https://docs.newrelic.com/docs/synthetics/new-relic-synthetics/scripting-monitors/writing-api-tests\n * for details.\n */\n\nvar assert = require('assert');\n\n$http.post('http://httpbin.org/post',\n  // Post data\n  {\n    json: {\n      widgetType: 'gear',\n      widgetCount: 10\n    }\n  },\n  // Callback\n  function (err, response, body) {\n    assert.equal(response.statusCode, 200, 'Expected a 200 OK response');\n\n    console.log('Response:', body.json);\n    console.log('hello');\n    assert.equal(body.json.widgetType, 'gear', 'Expected a gear widget type');\n    assert.equal(body.json.widgetCount, 10, 'Expected 10 widgets');\n  }\n);\n"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.foo_script",
            "newrelic_synthetics_monitor.foo"
          ]
        }
      ]
    }
  ]
}
